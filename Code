LinkedList<Integer> visited = new LinkedList<>();
LinkedList<Integer> unvisited = new LinkedList<>();
int[][] values = new int[adj.size()][2];
for(int i = 0; i < values.length; i++)
{
    unvisited.add(i);
    if(i == source)
    {
        values[i][0] = 0;
        values[i][1] = source;
        continue;
    }
    values[i][0] = Integer.MAX_VALUE;
}

int current = source;
while(!unvisited.isEmpty())
{
    unvisited.remove(new Integer(current));
    for(Edge edge : adj.get(current))
    {
        if(!visited.contains(edge.destination))
        {
            if(edge.distance + values[current][0] < values[edge.destination][0])
            {
                values[edge.destination][0] = cost;
                values[edge.destination][1] = current;
            }
        }
    }
    visited.add(current);
    current = lowestDistance(adj.get(current), values);
    if(current == -1)
    {
        current = unvisited.get(0);
    }
}
